{"version":3,"sources":["components/TodoItem.js","stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.js","components/InfoItem.js","components/TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","observer","onToggle","_this","props","todo","toggle","deleteTodo","event","delete","this","react_default","a","createElement","className","completed","showing","onChange","type","value","checked","title","onClick","class","aria-hidden","Component","TodoModel","store","id","Object","classCallCheck","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","todoStore","lastID","todos","map","item","concat","filter","observable","action","push","TodoEntry","state","handleKeyDown","keyCode","preventDefault","addTodo","setState","_this2","target","onKeyDown","placeholder","InfoItem","showActive","active","showCompleted","completeds","showClearCompleted","clearComplateds","all","showAll","TodoItems","components_TodoItem","components_InfoItem","App","components_TodoEntry","components_TodoItems","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e815656.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport {observer} from 'mobx-react'\r\n\r\n@observer\r\nclass TodoItem extends Component {\r\n    \r\n    onToggle = () => {\r\n        this.props.todo.toggle();\r\n    }\r\n\r\n    deleteTodo = (event) => {\r\n        this.props.todo.delete(event)\r\n    }\r\n    render() {\r\n        const { todo } = this.props;\r\n        return(\r\n            <li className={todo.completed? 'completed' : ''}>\r\n                <div \r\n                    className={todo.showing? ' viwe show ' : 'dont-show viwe'}\r\n                >\r\n                    <input \r\n                        onChange={this.onToggle}\r\n                        type=\"checkbox\" \r\n                        className=\"toggle\" \r\n                        value=\"on\" \r\n                        checked={todo.completed}\r\n                    />\r\n                    <label>{todo.title}</label>\r\n                    <button \r\n                        onClick={this.deleteTodo}\r\n                        className=\"destry\"\r\n                    ><i class=\"fa fa-times\" aria-hidden=\"true\"></i></button>\r\n                </div>\r\n            </li>    \r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import {observable, action} from 'mobx'\nimport todoStore from '../stores/TodoStore';\nimport TodoItem from '../components/TodoItem';\n\nexport default class TodoModel {\n    store\n    id\n    @observable showing\n    @observable title\n    @observable completed\n\n    constructor(store,title,completed,id,showing) {\n        this.title = title\n        this.completed = completed \n        this.id = id\n        this.store = store \n        this.showing = showing\n    }\n    \n    @action\n    toggle() {\n        this.completed = !this.completed;\n        if(this.completed) {\n            todoStore.lastID--\n        }\n        else{\n            todoStore.lastID++\n        } \n    }\n\n    @action\n    all() {\n        todoStore.todos.map(item => {\n            item.showing = true;\n        })\n    }\n\n    @action\n    active() {\n        this.todos.map(item => {\n            if(`${item.completed}`) {\n                item.showing = false;\n            }\n            else {\n                item.showing = true;\n            }\n        })\n\n    }\n\n    @action\n    delete() {\n        this.showing = false;\n        todoStore.lastID--        \n    }\n\n    @action\n    completeds() {\n        // or\n         return this.todos.filter(item => {item.completed = true});  \n    }\n\n    @action\n    clearComplateds() {\n        return this.todos.filter(item => {item.completed = false}); \n    }\n\n}\n","import {observable, action} from 'mobx'\nimport TodoModel from './TodoModel'\n//  \nclass TodoStore {\n\n    //Timer\n    // @observable time\n    // constructor() {\n    //     this.time = new Date();\n    //     this.interval = setInterval(() => {\n    //         this.time = new Date()\n    //     },1000)\n    // }\n\n    // @action\n    // pauseClick() {\n    //     clearInterval(this.interval)\n    // }\n\n    // @action\n    // startClick() {\n    //     this.interval = setInterval(() => {\n    //         this.time = new Date()\n    //     },1000)\n    // }\n\n    //end Timer\n\n    @observable todos = [\n\n    ]\n\n    @observable lastID = 0\n\n    @action\n    addTodo(title) {\n        this.todos.push(new TodoModel(this,title,false,this.lastID++,true))\n    }\n\n}\n\nconst todoStore = new TodoStore()\nexport default todoStore\n","import React, {Component} from 'react';\r\nimport todoStore from '../stores/TodoStore';\r\n\r\nclass TodoEntry extends Component {\r\n    state = {\r\n        value: \"\"\r\n    };\r\n\r\n    handleKeyDown = event => {\r\n        if(event.keyCode !== 13) {\r\n            return;\r\n        }\r\n        event.preventDefault()\r\n        todoStore.addTodo(this.state.value)\r\n        this.setState({\r\n            value: ''\r\n        }) \r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <header className=\"header\">\r\n                <h1>todo</h1>\r\n                <input\r\n                    value={this.state.value}\r\n                    onChange={event => this.setState({value: event.target.value})}\r\n                    onKeyDown={\r\n                        event =>this.handleKeyDown(event)\r\n                    }\r\n                    type=\"text\"\r\n                    className=\"new-todo\"\r\n                    placeholder=\"what neads to do?\"\r\n                />\r\n            </header>    \r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoEntry;","import React,{Component} from 'react';\r\nimport {observer} from 'mobx-react'\r\nimport todoStore from '../stores/TodoStore';\r\nimport TodoModel from '../stores/TodoModel';\r\n\r\n\r\n@observer\r\nclass InfoItem extends Component {  \r\n\r\n    showAll() {\r\n        this.props.todo.all();\r\n    }\r\n\r\n    showActive = () => {\r\n        this.props.todo.active();\r\n    }\r\n\r\n    showCompleted = () => {\r\n        TodoModel.completeds();\r\n    }\r\n\r\n    showClearCompleted = () => {\r\n        TodoModel.clearComplateds();\r\n    }\r\n\r\n    render() {\r\n        const { todo } = this.props;\r\n        return(\r\n            <div className=\"viwe\">\r\n                <div className=\"infoitem\">\r\n                    <span>{\r\n                        `${todoStore.lastID} items left`\r\n                    }</span>\r\n                    <div className=\"actions\">\r\n                        <span \r\n                            onClick={() =>this.showAll()}\r\n                            className=\"item-actions\"\r\n                        >All</span>\r\n                        <span \r\n                            onClick={() =>this.showActive()}\r\n                            className=\"item-actions\"\r\n                        >Active</span>\r\n                        <span \r\n                            onClick={() =>this.showCompleted()}\r\n                            className=\"item-actions\"\r\n                        >Completed\r\n                        </span>\r\n                        <span\r\n                            onClick={() =>this.showClearCompleted()}\r\n                            className=\"item-actions\"\r\n                        >clear completed</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InfoItem;","import React,{Component} from 'react';\r\nimport TodoItem from './TodoItem'\r\nimport {observer} from 'mobx-react'\r\nimport todoStore from '../stores/TodoStore';\r\nimport InfoItem from\"./InfoItem\";\r\n\r\n@observer\r\nclass TodoItems extends Component {\r\n    render() {\r\n        return(\r\n            <section className=\"main\">\r\n                <ul className=\"todo-list\">\r\n                    {\r\n                        todoStore.todos.map(todo=> {\r\n                            return(\r\n                                <TodoItem todo={todo} />\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n                <InfoItem />\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItems;","import React, {Component} from 'react';\nimport {observer} from 'mobx-react'\nimport './App.css';\nimport TodoEntry from \"./components/TodoEntry\";\nimport TodoItems from \"./components/TodoItems\";\n\n@observer\nclass App extends Component {\n    render() {\n\n        return (\n            <div id=\"todoapp\" className=\"todoapp\">\n                <TodoEntry/>\n                <TodoItems/>\n            </div>\n        );\n        \n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}