{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/InfoItem.js","components/TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","showing","deletes","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","todoStore","lastID","observable","action","todos","push","map","item","TodoEntry","observer","state","value","handleKeyDown","event","keyCode","preventDefault","addTodo","_this","setState","_this2","react_default","a","createElement","className","onChange","target","onKeyDown","type","placeholder","Component","TodoItem","onToggle","props","todo","toggle","deleteTodo","delete","checked","onClick","class","aria-hidden","InfoItem","showAll","all","showActive","active","showCompleted","completeds","showClearCompleted","clearComplateds","showInfo","concat","TodoItems","components_TodoItem","components_InfoItem","App","components_TodoEntry","components_TodoItems","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c970893.chunk.js","sourcesContent":["import {observable, action} from 'mobx'\r\nimport todoStore from '../stores/TodoStore';\r\n\r\nexport default class TodoModel {\r\n    store\r\n    id\r\n    @observable showing\r\n    @observable title\r\n    @observable completed\r\n    @observable deletes\r\n\r\n    constructor(store,title,completed,id,showing,deletes) {\r\n        this.title = title\r\n        this.completed = completed \r\n        this.id = id\r\n        this.store = store \r\n        this.showing = showing\r\n        this.deletes = deletes\r\n    }\r\n    \r\n    @action\r\n    toggle() {\r\n        this.completed = !this.completed;\r\n        if(this.completed) {\r\n            todoStore.lastID--\r\n        }\r\n        else{\r\n            todoStore.lastID++\r\n        }\r\n    }\r\n    @action\r\n    delete() {\r\n        this.showing = false;\r\n        this.deletes = true;\r\n     \r\n        if(!this.completed) {\r\n            todoStore.lastID--\r\n        }\r\n    }\r\n}\r\n","import {observable, action} from 'mobx'\r\nimport TodoModel from './TodoModel'\r\n//  \r\nclass TodoStore {\r\n\r\n    @observable todos = [\r\n\r\n    ]\r\n\r\n    @observable lastID = 0\r\n    @observable deletes = false\r\n\r\n    @action\r\n    addTodo(title) {\r\n        this.todos.push(new TodoModel(this,title,false,this.lastID++,true,false))\r\n    }\r\n\r\n    \r\n    @action\r\n    all() {\r\n        todoStore.todos.map(item => {\r\n            if (item.deletes === true) {\r\n                item.showing = false;\r\n            } else {\r\n                item.showing = true;\r\n            }\r\n        })\r\n    }\r\n\r\n    @action\r\n    active() {\r\n        this.todos.map(item => {\r\n            if (item.deletes === true) {\r\n                item.showing = false;\r\n            } else {\r\n                if(item.completed == false) {\r\n                    item.showing = true;\r\n                } else {\r\n                    item.showing = false;\r\n                    item.lastID--;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    @action\r\n    completeds() {\r\n        this.todos.map(item => {\r\n            if (item.deletes === true) {\r\n                item.showing = false;\r\n            } else {\r\n                if(item.completed == false ) {\r\n                    item.showing = false;\r\n                } else {\r\n                    item.showing = true;\r\n                    item.lastID--;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    @action\r\n    clearComplateds() {\r\n        this.todos.map(item => {\r\n            if (item.deletes === true) {\r\n                item.showing = false;\r\n            } else {\r\n                if(item.completed == true) {\r\n                    item.showing = false;\r\n                    item.deletes = true;\r\n                    item.lastID--;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n}\r\n\r\nconst todoStore = new TodoStore()\r\nexport default todoStore\r\n","import React, {Component} from 'react';\r\nimport todoStore from '../stores/TodoStore';\r\nimport {observer} from 'mobx-react'\r\n\r\n@observer\r\nclass TodoEntry extends Component {\r\n    state = {\r\n        value: \"\"\r\n    };\r\n\r\n    handleKeyDown = event => {\r\n        if(event.keyCode !== 13) {\r\n            return;\r\n        }\r\n        event.preventDefault()\r\n        todoStore.addTodo(this.state.value)\r\n        this.setState({\r\n            value: ''\r\n        }) \r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <header className=\"header\">\r\n                <h1>todo</h1>\r\n                <input\r\n                    value={this.state.value}\r\n                    onChange={event => this.setState({value: event.target.value})}\r\n                    onKeyDown={\r\n                        event =>this.handleKeyDown(event)\r\n                    }\r\n                    type=\"text\"\r\n                    className=\"new-todo\"\r\n                    placeholder=\"what neads to do?\"\r\n                />\r\n            </header>    \r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoEntry;","import React,{Component} from 'react';\r\nimport {observer} from 'mobx-react'\r\n\r\n@observer\r\nclass TodoItem extends Component {\r\n    \r\n    onToggle = () => {\r\n        this.props.todo.toggle();\r\n    }\r\n\r\n    deleteTodo = (event) => {\r\n        this.props.todo.delete(event)\r\n    }\r\n    render() {\r\n        const { todo } = this.props;\r\n        return(\r\n            <li className={todo.completed? 'completed' : ''}>\r\n                <div \r\n                    className={todo.showing? ' viwe show ' : 'dont-show viwe'}\r\n                >\r\n                    <input \r\n                        onChange={this.onToggle}\r\n                        type=\"checkbox\" \r\n                        className=\"toggle\" \r\n                        value=\"on\" \r\n                        checked={todo.completed}\r\n                    />\r\n                    <label>{todo.title}</label>\r\n                    <button \r\n                        onClick={this.deleteTodo}\r\n                        className=\"destry\"\r\n                    ><i class=\"fa fa-times\" aria-hidden=\"true\"></i></button>\r\n                </div>\r\n            </li>    \r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React,{Component} from 'react';\r\nimport {observer} from 'mobx-react'\r\nimport todoStore from '../stores/TodoStore';\r\n\r\n\r\n@observer\r\nclass InfoItem extends Component {  \r\n\r\n    showAll = () => {\r\n        todoStore.all();\r\n    }\r\n\r\n    showActive = () => {\r\n        todoStore.active();\r\n    }\r\n\r\n    showCompleted = () => {\r\n        todoStore.completeds();\r\n    }\r\n\r\n    showClearCompleted = () => {\r\n        todoStore.clearComplateds();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div \r\n                className={this.props.showInfo? 'dont-show viwe' : 'show viwe'}\r\n            >\r\n                <div className=\"infoitem\">\r\n                    <span>{\r\n                        `${todoStore.lastID} items left`\r\n                    }</span>\r\n                    <div className=\"actions\">\r\n                        <span \r\n                            onClick={() =>this.showAll()}\r\n                            className=\"item-actions\"\r\n                        >All</span>\r\n                        <span \r\n                            onClick={() =>this.showActive()}\r\n                            className=\"item-actions\"\r\n                        >Active</span>\r\n                        <span \r\n                            onClick={() =>this.showCompleted()}\r\n                            className=\"item-actions\"\r\n                        >Completed\r\n                        </span>\r\n                        <span\r\n                            onClick={() =>this.showClearCompleted()}\r\n                            className=\"item-actions\"\r\n                        >clear completed</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InfoItem;","import React,{Component} from 'react';\r\nimport TodoItem from './TodoItem'\r\nimport {observer} from 'mobx-react'\r\nimport todoStore from '../stores/TodoStore';\r\nimport InfoItem from\"./InfoItem\";\r\nimport {observable} from 'mobx'\r\n\r\n\r\n@observer\r\nclass TodoItems extends Component {\r\n    @observable showInfoItem\r\n\r\n    render() {\r\n        return(\r\n            <section className=\"main\">\r\n                <ul className=\"todo-list\">\r\n                    {\r\n                        todoStore.todos.map(todo=> {\r\n                            return(\r\n                                <TodoItem todo={todo} />\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n                <InfoItem/>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItems;","import React, {Component} from 'react';\r\nimport {observer} from 'mobx-react'\r\nimport './App.css';\r\nimport TodoEntry from \"./components/TodoEntry\";\r\nimport TodoItems from \"./components/TodoItems\";\r\n\r\n@observer\r\nclass App extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div id=\"todoapp\" className=\"todoapp\">\r\n                <TodoEntry/>\r\n                <TodoItems/>\r\n            </div>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}